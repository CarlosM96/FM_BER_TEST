`timescale 1ns / 1ps
//`define DLY #100
//////////////////////////////////////////////////////////////////////////////////
// Generated by: Carlos B. Montiel and Diego Aranda 
// Mechanic and Energy Laboratory, Engineering College, Paraguay
// DAPHNE-PY TEAM for DUNE Experiment
// FULL MODE ERROR RATE TEST CODE
//////////////////////////////////////////////////////////////////////////////////


module top(
   input wire clk_p,
	input wire clk_n,
	input wire USER_CLK_P,
	input wire USER_CLK_N,
	output wire clk_si5324_240_out_p,
	output wire clk_si5324_240_out_n,
	input wire reset,
	input wire rx_p,
	input wire rx_n,
	input wire transerial,
	input wire we,
	output wire rxinit,
	output wire commadet,
	output wire led_3c,
	output wire data_serial2,
	inout wire         SDA,
	inout wire         SCL,
	output wire        si5324_resetn,
	output wire        i2cmux_rst,
	output wire        led_aligned
    );


	 
	 wire [10:0] addr;
	 wire [31:0] rx_data_, data, data_GTH; 
	 wire ion, iop;
	 wire dataserialout, data_s;
	 wire clk_in150, clk_in400, clk_buff;
	 wire gtx0_txoutclk_i, gtx0_txusrclk_i, gtx0_txusrclk2_i, txoutclk_mmcm0_locked_i;
	 wire txoutclk_mmcm0_reset_i, tx_pll_lock, tx_reset_done;
	 wire gtx0_rxoutclk_i, gtx0_rxusrclk_i, gtx0_rxusrclk2_i, rxoutclk_mmcm0_locked_i;
	 wire rxoutclk_mmcm0_reset_i, rx_pll_lock;
	 wire txoutclk, rxoutclk;
	 wire [1:0] datatype;
	 wire [31:0] datain;
	 wire wereg;
	 wire txk;

	 wire tx_int, rx_init, lock1, lock2, TXlock, RXlock, act;
	 wire gtx0_txusrclk2_o;
	 wire [39:0] din, dout, data_al;
	 wire aligned, correction_done, comaddet_i;
	 reg reset;
	wire clk_240_w;
    wire locked_240_w;
    wire clk40_w;
    wire clk300_w;

wire drpclk_in_i;
wire lock;
wire [3:0] ka;

//####  Instance of module for the errors detection #####
// This module receives the words received by the GTH and 
// generates the same PRBS to subtract it bit by bit with the received data.
// It counts an error counter that at the end of the transmission it sends 
// by uart to the pc.
//
rx_fullsuma_error_top rx_fullsuma_error_top(
    .rx_data(data_GTH),           // data provide by GTH RX
	.rx_clk(gt0_rxusrclk2_out),    // reference clk provide by GTH
	.reset(~rx_reset_done),		   // The system is idle when the GTH is not ready
	.trans_en(1'b1),			   // signal for uart transmitions
	.tx_serial(data_s),			   // serial data for sending errors
	.aligned(1'b1),
	.rx_k(ka),
	.led_3c(led_3c)				   // Led for 3c character detection
	
);


wire [7:0] Din_w;
wire [7:0] Dout_w;
wire ack_in_w;
wire ack_out_w;

wire clk_w;
wire cmd_ack_w;
wire ena_w;
wire nReset_w;
wire read_w;
wire start_w;
wire stop_w;
wire write_w;

// ####################  Instance of jitter atenuator ###############
// The VC709 board includes a Silicon Labs Si5324 jitter attenuator U24 on the back side of the board.
// FPGA user logic can implement a clock recovery circuit and then output this clock to a differential
// I/O pair on I/O bank 13 (REC_CLOCK_C_P, FPGA U1 pin AW32 and REC_CLOCK_C_N, FPGA
// U1 pin AW33) for jitter attenuation. The jitter-attenuated clock (Si5324_OUT_C_P,
// Si5324_OUT_C_N) is then routed as a reference clock to GTH Quad 113 inputs MGTREFCLK0P
// (FPGA U1 pin AH8) and MGTREFCLK0N (FPGA U1 pin AH7). The Si5324 U24 jitter attenuator
// has two LVCMOS18 connections to the XCVX690T FPGA U1. 
//
//  THIS INSTANCE IS BASED ON THE VHDL CODE PROVIDE BY CERN TEAM.
//
si5324_init si5324_init(
    .Din      (Din_w),
    .Dout     (Dout_w),
    .LOL_READ (),
    .LOS_READ (),
    .RST      (!locked_240_w),
    .ack_in   (ack_in_w),
    .ack_out  (ack_out_w),
    .clk      (clk_w),
    .clk40    (clk40_w),
    .cmd_ack  (cmd_ack_w),
    .ena      (ena_w),
    .nReset   (nReset_w),
    .read     (read_w),
    .start    (start_w),
    .stop     (stop_w),
    .write    (write_w)
);

// ######## I2C module for si5324 ######
//THIS INSTANCE IS BASED ON THE VHDL CODE PROVIDE BY CERN TEAM.
//
simple_i2c simple_i2c (
	    .clk       (clk_w),
		.ena       (ena_w),
		.nReset    (nReset_w),
		.clk_cnt   (8'b11111111), 
		.start     (start_w),
		.stop      (stop_w),
		.read       (read_w),
		.write      (write_w),
		.ack_in     (ack_in_w),
		.Din        (Din_w),
		.cmd_ack    (cmd_ack_w),
		.ack_out    (ack_out_w),
		.Dout       (Dout_w),
		//i2c signals
		.SCL         (SCL),
		.SDA         (SDA)
);

// ##### Internal Clocks module for the system ##########
// The clk wizard is used for:
//							  Generated the 240 Mhz clk for GTP.
//							  Generated the 40 Mhz clk for GTP DRP. 

clk_wiz_0 clk_wiz_0 (
  // Clock out ports
  .clk_240      (clk_240_w),
  .clk_40       (clk40_w),

  // Status and control signals
  .reset        (reset),
  .locked       (locked_240_w),
 // Clock in ports
  .clk_in1_p   (USER_CLK_P),
  .clk_in1_n   (USER_CLK_N)
  
);

// ### Output buffer for the ref clk for gtp
// clk_si5324_240_out_p is connected to clk_p in the constraints  
// clk_si5324_240_out_n is connected to clk_n in the constraints 

OBUFDS OBUFDS(
   .I       (clk_240_w),
   .O       (clk_si5324_240_out_p),
   .OB      (clk_si5324_240_out_n)
);


//***********************************************************************//
    //                                                                       //
    //--------------------------- The GTH INSTANCE --------------------------//
    //             This instance is Generated by Xilinx Generator            //
    //***********************************************************************//
RX_TOP RX_TOP(
    .Q3_CLK0_GTREFCLK_PAD_N_IN(clk_n),
    .Q3_CLK0_GTREFCLK_PAD_P_IN(clk_p),
    .DRP_CLK_IN1(clk40_w),
    .lock(locked_240_w),
    .RESET(reset),    
    .RX_DATA_OUT(data_GTH),
    .RXN_IN(rx_n),
    .RXP_IN(rx_p),
    .RXUSR_CLK(gt0_rxusrclk2_out),
    .RX_initDone(rx_reset_done),
    .commadet(commadet_i),
    .aligned(led_aligned),
    .k_out(ka)
    );
	
	assign data_serial2 = data_s;
	assign commadet = commadet_i;
	assign rxinit = rx_reset_done;
	assign si5324_resetn = !( 1'b0 | !locked_240_w);
    assign i2cmux_rst = !( 1'b0  | !locked_240_w);
    	

endmodule

